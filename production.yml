volumes:
  production_postgres_data: {}
  production_postgres_data_backups: {}
  production_traefik: {}
  production_django_media: {}
  tailwind-status: {}

services:

  tailwind:
    image: node:20-alpine
    working_dir: /app
    volumes:
      - ./website/theme/static_src:/app
      - ./website/static:/app/../static
      - tailwind-status:/tailwind-status
    command: >
      sh -c "
        npm install &&
        npm run build &&
        touch /tailwind-status/.tailwind_done
      "

  django:
    build:
      context: .
      dockerfile: ./compose/production/django/Dockerfile
    image: website_production_django
    volumes:
      - production_django_media:/app/website/media
      - ./website/static:/app/website/static
      - tailwind-status:/tailwind-status
    restart: always
    depends_on:
      - tailwind 
      - postgres
      - redis
    env_file:
      - ./.envs/.production/.django
      - ./.envs/.production/.postgres
    command: /start

  postgres:
    build:
      context: .
      dockerfile: ./compose/production/postgres/Dockerfile
    image: website_production_postgres
    restart: always
    volumes:
      - production_postgres_data:/var/lib/postgresql/data
      - production_postgres_data_backups:/backups
    env_file:
      - ./.envs/.production/.postgres

  traefik:
    build:
      context: .
      dockerfile: ./compose/production/traefik/Dockerfile
    image: website_production_traefik
    restart: always
    depends_on:
      - django
    volumes:
      - production_traefik:/etc/traefik/acme
    ports:
      - '0.0.0.0:80:80'
      - '0.0.0.0:443:443'

  redis:
    image: redis:6
    restart: always

  nginx:
    build:
      context: .
      dockerfile: ./compose/production/nginx/Dockerfile
    image: website_local_nginx
    restart: always
    depends_on:
      - django
    volumes:
      - production_django_media:/usr/share/nginx/media:ro
